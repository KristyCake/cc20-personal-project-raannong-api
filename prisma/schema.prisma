// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  // output   = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String?  @unique
  mobile    String?  @unique
  password  String
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pets       Pet[]
  orders     Order[]
  reviews    Review[]
  cart       Cart?
  aiChatLogs AI_Chat_Log[]
}

enum Role {
  USER
  ADMIN
  OWNER
}

model Pet {
  id        Int      @id @default(autoincrement())
  name      String
  species   String
  breed     String
  birthDate DateTime
  gender    String
  imageUrl  String

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id])
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int
  imageUrl    String?
  category    PetCategory? @default(CAT)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  orderItems OrderItem[]
  cartItems  CartItem[]
  reviews    Review[]
  promotions Promotion[]
}

enum PetCategory {
  CAT
  DOG
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  orderedAt  DateTime    @default(now())
  totalPrice Float
  status     OrderStatus @default(PENDING)

  orderItems OrderItem[]
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

model OrderItem {
  id              Int   @id @default(autoincrement())
  orderId         Int
  productId       Int
  quantity        Int
  priceAtPurchase Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Promotion {
  id              Int      @id @default(autoincrement())
  productId       Int
  title           String
  description     String
  discountPercent Float
  startDate       DateTime
  endDate         DateTime

  product Product @relation(fields: [productId], references: [id])
}

model AI_Chat_Log {
  id         Int      @id @default(autoincrement())
  userId     Int
  question   String
  aiResponse String
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
