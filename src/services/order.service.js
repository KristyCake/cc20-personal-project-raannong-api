import prisma from "../config/prisma.js";

export async function createOrderFromCart(userId) {
  // 1. ‡∏´‡∏≤ cart ‡∏Ç‡∏≠‡∏á user ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  const cart = await prisma.cart.findUnique({
    where: { userId },
    include: {
      items: {
        include: {
          product: true, // ‚Üê ‡∏ï‡πâ‡∏≠‡∏á include ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á product.price ‡πÑ‡∏î‡πâ
        },
      },
    },
  });

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ cart ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  if (!cart || cart.items.length === 0) {
    throw new Error("Cart is empty");
  }

  // 2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalPrice ‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô cart
  const totalPrice = cart.items.reduce((sum, item) => {
    return sum + item.quantity * item.product.price;
  }, 0);

  // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á order ‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏° orderItems
  const order = await prisma.order.create({
    data: {
      userId,
      totalPrice,
      orderItems: {
        create: cart.items.map((item) => ({
          productId: item.productId,
          quantity: item.quantity,
          priceAtPurchase: item.product.price // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
        })),
      },
    },
    include: {
      orderItems: true,
    },
  });

  // 4. ‡∏•‡∏ö cart items ‡πÄ‡∏Å‡πà‡∏≤ (‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤)
  await prisma.cartItem.deleteMany({
    where: {
      cartId: cart.id,
    },
  });

  return order;
}

export async function getAllOrdersService() {
  return await prisma.order.findMany({
    include: { orderItems: true },
  });
}

export async function getOrderByIdService(id) {
  return await prisma.order.findUnique({
    where: { id },
    include: { orderItems: true },
  });
}

export async function getOrdersByUserIdService(userId) {
  return await prisma.order.findMany({
    where: { userId },
    include: { orderItems: true },
  });
}

